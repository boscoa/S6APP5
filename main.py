import flux
import pollard

# Trouver cle de decryption pour parametres q, p, g dans parametres.mm
n = 71632723108922042565754944705405938190163585182073827738737257362015607916694427702407539315166426071602596601779609881448209515844638662529498857637473895727439924386515509746946997356908229763669590304560652312325131017845440601438692992657035378159812499525148161871071841049058092385268270673367938496513
e = 1009

# Utilisation de l'algo p-1
p = pollard.pollard_pm1(n)
q = n // p
phi_n = (p - 1) * (q - 1)

print("Gros N est premier: {}".format(pollard.miller_rabin(n)))
print("P est premier: {}".format(pollard.miller_rabin(p)))
print("Q est premier: {}".format(pollard.miller_rabin(q)))

d = pollard.euclide(e, phi_n)

qdh_chiffre_avec_RSA = 70785482415899901219256855373079758876285923471951840038722877622097582944768442919300478197733262514534911901131859013939654902078384994979880540719293485131574905521151256806126737353610928922434810670654618891838295876181905553857594653764136067479449117470741836721372149447795646290103141292761424726007
pdh_chiffre_avec_RSA = 55044587110698448189468021909149190373421069219506981148292634221985403129928367209713497911359302701069378532959510957622709061077384648566361893749771744973388835727259855002207844685526295296408852878202498675158924213264474587673461598376054133832370354928763624202425050121409987087150490459351809040858
gdh_chiffre_avec_RSA = 43089172300844684958445369204000423742543038862350925279569289644298734265625491619486408239703259462606739540181409010715678916496299388069246398890469779970287613357772582024703107603034996120914490203805569384580718393586094166173301167583379300330660182750028000520221960355249560831414918130647224546308

# Trouver les parametres de Deffie Hellman
q = pollard.puissance_mod(qdh_chiffre_avec_RSA, d, n)
p = pollard.puissance_mod(pdh_chiffre_avec_RSA, d, n)
g = pollard.puissance_mod(gdh_chiffre_avec_RSA, d, n)

# Appel de la methode de chiffrement / dechiffrement de fichier pour trouver les noms des employes et le nouveau n et e
flux.chiffre_flux(g, "salaires.mm","sortie.txt")

# Donnees venant de sortie.txt
alain = 81530476374664351124876242644701327168836407987
michele = 83740877821201430552252653974153238737996745098
stephanie = 51373667846507963545859239582447701017826406175
fernand = 61167846837720209456441528754183777549647735855
angele = 42340513171888188994504759277496496710896088718
bernard = 65069303637151076134861115122997306654987857614
claude = 32785990179062766920584737848735367794508677603

n = 86062381025757488680496918738059554508315544797
e = 13

# Utilisation de l'algo rho
p = pollard.pollard_rho(n)
q = n // p
phi_n = (p - 1) * (q - 1)

print("Petit N est premier: {}".format(pollard.miller_rabin(n)))
print("P est premier: {}".format(pollard.miller_rabin(p)))
print("Q est premier: {}".format(pollard.miller_rabin(q)))
d = pollard.euclide(e, phi_n)

# Afficher les salaires des gens
print("Salaire Alain: {}".format(pollard.puissance_mod(alain, d, n)))
print("Salaire Michele: {}".format(pollard.puissance_mod(michele, d, n)))
print("Salaire Stephanie: {}".format(pollard.puissance_mod(stephanie, d, n)))
print("Salaire Fernand: {}".format(pollard.puissance_mod(fernand, d, n)))
print("Salaire Angele: {}".format(pollard.puissance_mod(angele, d, n)))
print("Salaire Bernard: {}".format(pollard.puissance_mod(bernard, d, n)))
print("Salaire Claude: {}".format(pollard.puissance_mod(claude, d, n)))